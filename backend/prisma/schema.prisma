generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                    String                 @id @default(uuid())
  name                  String
  email                 String                 @unique
  cpf                   String                 @unique
  password              String
  avatar                String?
  xp                    Int                    @default(0)
  level                 Int                    @default(1)
  deletedAt             DateTime?
  activitiesCreated     Activities[]
  preferences           Preferences[]
  activitiesParticipant ActivityParticipants[]
  achievements          UserAchievements[]
}

model Activities {
  id                   String                 @id @default(uuid())
  title                String
  description          String
  type                 ActivityTypes          @relation(fields: [typeId], references: [id])
  typeId               String
  confirmationCode     String
  image                String
  scheduledDate        DateTime
  createdAt            DateTime               @default(now())
  deletedAt            DateTime?
  completedAt          DateTime?
  private              Boolean
  creator              Users                  @relation(fields: [creatorId], references: [id])
  creatorId            String
  address              ActivityAddress?
  ActivityParticipants ActivityParticipants[]
}

model Achievements {
  id               String             @id @default(uuid())
  name             String
  criterion        String
  UserAchievements UserAchievements[]
}

model ActivityTypes {
  id          String        @id @default(uuid())
  name        String
  description String
  image       String
  Activities  Activities[]
  Preferences Preferences[]
}

model ActivityAddress {
  id         String     @id @default(uuid())
  latitude   Decimal
  longitude  Decimal
  activityId String     @unique
  activitiy  Activities @relation(fields: [activityId], references: [id])
}

model ActivityParticipants {
  id          String     @id @default(uuid())
  activity    Activities @relation(fields: [activityId], references: [id])
  activityId  String
  user        Users      @relation(fields: [userId], references: [id])
  userId      String
  approved    Boolean
  confirmedAt DateTime?
}

model Preferences {
  id     String        @id @default(uuid())
  user   Users         @relation(fields: [userId], references: [id])
  userId String
  type   ActivityTypes @relation(fields: [typeId], references: [id])
  typeId String
}

model UserAchievements {
  id            String       @id @default(uuid())
  user          Users        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievements @relation(fields: [achievementId], references: [id])
  achievementId String
}
